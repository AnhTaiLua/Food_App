import 'package:flutter/material.dart';
import 'package:provider/provider.dart';import '../providers/auth_provider.dart';import '../services/user_api_service.dart';import '../services/product_api_service.dart';import '../services/order_api_service.dart';import '../models/order.dart';import 'admin_users_screen.dart';import 'admin_products_screen.dart';import 'admin_orders_screen.dart';import 'admin_analytics_screen.dart';import 'home_screen.dart';import 'main_nav_widget.dart'; // ‚úÖ Th√™m import cho MainNavWidgetclass AdminDashboardScreen extends StatefulWidget {  const AdminDashboardScreen({super.key});  @override  State<AdminDashboardScreen> createState() => _AdminDashboardScreenState();}class _AdminDashboardScreenState extends State<AdminDashboardScreen> with SingleTickerProviderStateMixin {  late AnimationController _animationController;  late Animation<double> _fadeAnimation;    // Stats data  int totalUsers = 0;  int totalProducts = 0;  int totalOrders = 0;  bool isLoadingStats = true;  String lastUpdated = '';  // ‚úÖ TH√äM: Flag ƒë·ªÉ track dispose state  bool _isDisposed = false;  @override  void initState() {    super.initState();    _animationController = AnimationController(      duration: const Duration(milliseconds: 800),      vsync: this,    );    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),    );    _animationController.forward();    _loadStats();  }  @override  void dispose() {    _isDisposed = true; // ‚úÖ Set flag tr∆∞·ªõc khi dispose    _animationController.dispose();    super.dispose();  }  // ‚úÖ S·ª¨A: Safe setState v·ªõi mounted check  void _safeSetState(VoidCallback fn) {    if (!_isDisposed && mounted) {      setState(fn);    }  }  Future<void> _loadStats() async {    // ‚úÖ Check mounted tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu    if (_isDisposed || !mounted) return;        _safeSetState(() {      isLoadingStats = true;    });        try {      // Load data from APIs      final users = await UserApiService().getAllUsers();      final products = await ProductApiService().getProducts();            // ‚úÖ Check mounted sau m·ªói async call      if (_isDisposed || !mounted) return;            // Load all orders for admin      List<Order> orders = [];      try {        orders = await OrderApiService().getAllOrders();      } catch (e) {        print('L·ªói load orders: $e');        orders = [];      }            // ‚úÖ Final mounted check tr∆∞·ªõc setState      if (_isDisposed || !mounted) return;            _safeSetState(() {        totalUsers = users.length;        totalProducts = products.length;        totalOrders = orders.length;        isLoadingStats = false;        lastUpdated = _formatTime(DateTime.now());      });            print('üìä Stats loaded: Users: $totalUsers, Products: $totalProducts, Orders: $totalOrders');    } catch (e) {      print('‚ùå Error loading stats: $e');            // ‚úÖ Check mounted before error setState      if (_isDisposed || !mounted) return;            _safeSetState(() {        totalUsers = 0;        totalProducts = 0;        totalOrders = 0;        isLoadingStats = false;        lastUpdated = 'L·ªói t·∫£i d·ªØ li·ªáu';      });    }  }  String _formatTime(DateTime dateTime) {    return '${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';  }  @override  Widget build(BuildContext context) {    return Scaffold(      body: Container(        decoration: BoxDecoration(          gradient: LinearGradient(            begin: Alignment.topLeft,            end: Alignment.bottomRight,            colors: [              Colors.indigo.shade900,              Colors.purple.shade800,              Colors.pink.shade600,            ],          ),        ),        child: SafeArea(          child: Consumer<AuthProvider>(            builder: (context, authProvider, child) {              final user = authProvider.currentUser;                            return FadeTransition(                opacity: _fadeAnimation,                child: RefreshIndicator(                  onRefresh: _loadStats,                  color: Colors.white,                  backgroundColor: Colors.purple.shade700,                  child: SingleChildScrollView(                    physics: const AlwaysScrollableScrollPhysics(),                    padding: const EdgeInsets.all(20),                    child: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      children: [                        _buildHeader(context, user, authProvider),                        const SizedBox(height: 30),                        _buildStatsCards(),                        const SizedBox(height: 30),                        _buildQuickActions(context),                        const SizedBox(height: 30),                        _buildRecentActivities(),                        const SizedBox(height: 20),                      ],                    ),                  ),                ),              );            },          ),        ),      ),    );  }  Widget _buildHeader(BuildContext context, dynamic user, AuthProvider authProvider) {    return Container(      padding: const EdgeInsets.all(24),      decoration: BoxDecoration(        gradient: LinearGradient(          colors: [            Colors.white.withOpacity(0.15),            Colors.white.withOpacity(0.05),          ],        ),        borderRadius: BorderRadius.circular(20),        border: Border.all(color: Colors.white.withOpacity(0.2)),        boxShadow: [          BoxShadow(            color: Colors.black.withOpacity(0.1),            blurRadius: 20,            offset: const Offset(0, 10),          ),        ],      ),      child: Row(        children: [          Container(            width: 80,            height: 80,            decoration: BoxDecoration(              gradient: LinearGradient(                colors: [Colors.orange.shade400, Colors.red.shade400],              ),              borderRadius: BorderRadius.circular(20),              boxShadow: [                BoxShadow(                  color: Colors.orange.withOpacity(0.3),                  blurRadius: 15,                  offset: const Offset(0, 5),                ),              ],            ),            child: const Icon(              Icons.admin_panel_settings,              color: Colors.white,              size: 40,            ),          ),          const SizedBox(width: 20),          Expanded(            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: [                Text(                  'Ch√†o m·ª´ng tr·ªü l·∫°i!',                  style: TextStyle(                    color: Colors.white.withOpacity(0.8),                    fontSize: 16,                  ),                ),                const SizedBox(height: 5),                Text(                  user?.name ?? 'Admin',                  style: const TextStyle(                    color: Colors.white,                    fontSize: 24,                    fontWeight: FontWeight.bold,                  ),                ),                const SizedBox(height: 5),                Container(                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),                  decoration: BoxDecoration(                    color: Colors.orange.withOpacity(0.2),                    borderRadius: BorderRadius.circular(12),                    border: Border.all(color: Colors.orange.withOpacity(0.3)),                  ),                  child: Row(                    mainAxisSize: MainAxisSize.min,                    children: [                      const Icon(Icons.verified, color: Colors.orange, size: 14),                      const SizedBox(width: 4),                      Text(                        '${user?.role ?? 'Administrator'} - To√†n quy·ªÅn',                        style: const TextStyle(                          color: Colors.orange,                          fontSize: 12,                          fontWeight: FontWeight.w600,                        ),                      ),                    ],                  ),                ),              ],            ),          ),          Column(            children: [              IconButton(                onPressed: () {                  // ‚úÖ Check mounted before calling async method                  if (!_isDisposed && mounted) {                    _loadStats();                  }                },                icon: isLoadingStats                     ? const SizedBox(                        width: 20,                        height: 20,                        child: CircularProgressIndicator(                          strokeWidth: 2,                          valueColor: AlwaysStoppedAnimation<Color>(Colors.white),                        ),                      )                    : const Icon(Icons.refresh, color: Colors.white),                tooltip: 'T·∫£i l·∫°i d·ªØ li·ªáu',              ),              IconButton(                onPressed: () async {                  // ‚úÖ Check mounted before logout                  if (_isDisposed || !mounted) return;                                    final confirm = await _showLogoutDialog();                  if (confirm == true && mounted) {                    try {                      final authProvider = Provider.of<AuthProvider>(context, listen: false);                      await authProvider.logout();                                            print('üöÄ Admin logged out, navigating to MainNavWidget...');                                            // ‚úÖ S·ª¨A: Navigate v·ªÅ MainNavWidget thay v√¨ HomeScreen                      if (mounted) {                        Navigator.pushReplacement(                          context,                          MaterialPageRoute(                            builder: (context) => const MainNavWidget(initialTab: 0), // Tab 0 = Home                          ),                        );                      }                    } catch (e) {                      print('‚ùå Logout error: $e');                    }                  }                },                icon: const Icon(Icons.logout, color: Colors.white),                tooltip: 'ƒêƒÉng xu·∫•t',              ),            ],          ),        ],      ),    );  }  Widget _buildStatsCards() {    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Row(          mainAxisAlignment: MainAxisAlignment.spaceBetween,          children: [            const Text(              'Th·ªëng k√™ t·ªïng quan',              style: TextStyle(                color: Colors.white,                fontSize: 20,                fontWeight: FontWeight.bold,              ),            ),            if (lastUpdated.isNotEmpty)              Text(                'C·∫≠p nh·∫≠t: $lastUpdated',                style: TextStyle(                  color: Colors.white.withOpacity(0.7),                  fontSize: 12,                ),              ),          ],        ),        const SizedBox(height: 16),        Row(          children: [            Expanded(              child: _buildStatCard(                'Ng∆∞·ªùi d√πng',                 isLoadingStats ? '...' : totalUsers.toString(),                 Icons.people,                 Colors.blue,                 totalUsers > 0 ? '+${(totalUsers * 0.12).toInt()}' : '0%',              ),            ),            const SizedBox(width: 15),            Expanded(              child: _buildStatCard(                'S·∫£n ph·∫©m',                 isLoadingStats ? '...' : totalProducts.toString(),                 Icons.restaurant_menu,                 Colors.green,                 totalProducts > 0 ? '+${(totalProducts * 0.08).toInt()}' : '0%',              ),            ),            const SizedBox(width: 15),            Expanded(              child: _buildStatCard(                'ƒê∆°n h√†ng',                 isLoadingStats ? '...' : totalOrders.toString(),                 Icons.shopping_cart,                 Colors.orange,                 totalOrders > 0 ? '+${(totalOrders * 0.23).toInt()}' : '0%',              ),            ),          ],        ),      ],    );  }  Widget _buildStatCard(String title, String value, IconData icon, Color color, String change) {    return Container(      padding: const EdgeInsets.all(20),      decoration: BoxDecoration(        color: Colors.white.withOpacity(0.08),        borderRadius: BorderRadius.circular(16),        border: Border.all(color: Colors.white.withOpacity(0.1)),        boxShadow: [          BoxShadow(            color: color.withOpacity(0.1),            blurRadius: 15,            offset: const Offset(0, 5),          ),        ],      ),      child: Column(        crossAxisAlignment: CrossAxisAlignment.start,        children: [          Row(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              Container(                padding: const EdgeInsets.all(10),                decoration: BoxDecoration(                  color: color.withOpacity(0.2),                  borderRadius: BorderRadius.circular(10),                ),                child: Icon(icon, color: color, size: 24),              ),              if (change != '0%')                Container(                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),                  decoration: BoxDecoration(                    color: Colors.green.withOpacity(0.2),                    borderRadius: BorderRadius.circular(8),                  ),                  child: Text(                    change,                    style: const TextStyle(                      color: Colors.green,                      fontSize: 12,                      fontWeight: FontWeight.w600,                    ),                  ),                ),            ],          ),          const SizedBox(height: 15),          Text(            value,            style: const TextStyle(              color: Colors.white,              fontSize: 28,              fontWeight: FontWeight.bold,            ),          ),          Text(            title,            style: TextStyle(              color: Colors.white.withOpacity(0.7),              fontSize: 14,            ),          ),        ],      ),    );  }  Widget _buildQuickActions(BuildContext context) {    final actions = [      _ActionItem(        'Qu·∫£n l√Ω ng∆∞·ªùi d√πng',         Icons.people,         Colors.blue,         'Th√™m, s·ª≠a, x√≥a t√†i kho·∫£n',         () {          if (!_isDisposed && mounted) {            Navigator.push(context, MaterialPageRoute(builder: (context) => const AdminUsersScreen()));          }        },      ),      _ActionItem(        'Qu·∫£n l√Ω m√≥n ƒÉn',         Icons.restaurant_menu,         Colors.green,         'CRUD s·∫£n ph·∫©m & menu',         () {          if (!_isDisposed && mounted) {            Navigator.push(context, MaterialPageRoute(builder: (context) => const AdminProductsScreen()));          }        },      ),      _ActionItem(        'Qu·∫£n l√Ω ƒë∆°n h√†ng',         Icons.shopping_cart,         Colors.orange,         'X·ª≠ l√Ω & theo d√µi ƒë∆°n h√†ng',         () {          if (!_isDisposed && mounted) {            Navigator.push(context, MaterialPageRoute(builder: (context) => const AdminOrdersScreen()));          }        },      ),      _ActionItem(        'Khuy·∫øn m√£i',         Icons.local_offer,         Colors.purple,         'T·∫°o & qu·∫£n l√Ω m√£ gi·∫£m gi√°',         () {          if (!_isDisposed && mounted) {            _showPromotionManagement();          }        },      ),      _ActionItem(        'Th·ªëng k√™ & B√°o c√°o',         Icons.analytics,         Colors.pink,         'Ph√¢n t√≠ch doanh thu',         () {          if (!_isDisposed && mounted) {            Navigator.push(context, MaterialPageRoute(builder: (context) => const AdminAnalyticsScreen()));          }        },      ),      _ActionItem(        'C√†i ƒë·∫∑t h·ªá th·ªëng',         Icons.settings,         Colors.grey,         'C·∫•u h√¨nh & b·∫£o tr√¨',         () {          if (!_isDisposed && mounted) {            _showSystemSettings(context);          }        },      ),    ];    return Column(      crossAxisAlignment: CrossAxisAlignment.start,      children: [        Row(          children: [            const Text(              'Qu·∫£n l√Ω h·ªá th·ªëng',              style: TextStyle(                color: Colors.white,                fontSize: 22,                fontWeight: FontWeight.bold,              ),            ),            const SizedBox(width: 10),            Container(              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),              decoration: BoxDecoration(                color: Colors.red.withOpacity(0.2),                borderRadius: BorderRadius.circular(8),                border: Border.all(color: Colors.red.withOpacity(0.3)),              ),              child: const Text(                'FULL ACCESS',                style: TextStyle(                  color: Colors.red,                  fontSize: 10,                  fontWeight: FontWeight.bold,                ),              ),            ),          ],        ),        const SizedBox(height: 20),        GridView.builder(          shrinkWrap: true,          physics: const NeverScrollableScrollPhysics(),          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(            crossAxisCount: 2,            mainAxisSpacing: 15,            crossAxisSpacing: 15,            childAspectRatio: 1.1,          ),          itemCount: actions.length,          itemBuilder: (context, index) {            final action = actions[index];            return _buildActionCard(action);          },        ),      ],    );  }  Widget _buildActionCard(_ActionItem action) {    return Material(      color: Colors.transparent,      child: InkWell(        onTap: action.onTap,        borderRadius: BorderRadius.circular(20),        child: Container(          decoration: BoxDecoration(            gradient: LinearGradient(              begin: Alignment.topLeft,              end: Alignment.bottomRight,              colors: [                Colors.white.withOpacity(0.15),                Colors.white.withOpacity(0.05),              ],            ),            borderRadius: BorderRadius.circular(20),            border: Border.all(color: Colors.white.withOpacity(0.1)),            boxShadow: [              BoxShadow(                color: action.color.withOpacity(0.1),                blurRadius: 15,                offset: const Offset(0, 5),              ),            ],          ),          child: Padding(            padding: const EdgeInsets.all(16),            child: Column(              mainAxisAlignment: MainAxisAlignment.center,              children: [                Container(                  width: 50,                  height: 50,                  decoration: BoxDecoration(                    gradient: LinearGradient(                      colors: [                        action.color.withOpacity(0.8),                        action.color,                      ],                    ),                    borderRadius: BorderRadius.circular(15),                    boxShadow: [                      BoxShadow(                        color: action.color.withOpacity(0.3),                        blurRadius: 10,                        offset: const Offset(0, 5),                      ),                    ],                  ),                  child: Icon(                    action.icon,                    color: Colors.white,                    size: 25,                  ),                ),                const SizedBox(height: 12),                Text(                  action.title,                  textAlign: TextAlign.center,                  style: const TextStyle(                    color: Colors.white,                    fontSize: 13,                    fontWeight: FontWeight.w600,                  ),                ),                const SizedBox(height: 4),                Text(                  action.description,                  textAlign: TextAlign.center,                  maxLines: 2,                  overflow: TextOverflow.ellipsis,                  style: TextStyle(                    color: Colors.white.withOpacity(0.7),                    fontSize: 10,                  ),                ),              ],            ),          ),        ),      ),    );  }  Widget _buildRecentActivities() {    return Container(      padding: const EdgeInsets.all(20),      decoration: BoxDecoration(        color: Colors.white.withOpacity(0.08),        borderRadius: BorderRadius.circular(16),        border: Border.all(color: Colors.white.withOpacity(0.1)),      ),      child: Column(        crossAxisAlignment: CrossAxisAlignment.start,        children: [          Row(            mainAxisAlignment: MainAxisAlignment.spaceBetween,            children: [              const Text(                'Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y',                style: TextStyle(                  color: Colors.white,                  fontSize: 18,                  fontWeight: FontWeight.bold,                ),              ),              Container(                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),                decoration: BoxDecoration(                  color: Colors.green.withOpacity(0.2),                  borderRadius: BorderRadius.circular(8),                ),                child: const Text(                  'Live',                  style: TextStyle(                    color: Colors.green,                    fontSize: 10,                    fontWeight: FontWeight.bold,                  ),                ),              ),            ],          ),          const SizedBox(height: 15),          _buildActivityItem('T·∫£i th·ªëng k√™ h·ªá th·ªëng', '1 ph√∫t tr∆∞·ªõc', Icons.cloud_download, Colors.green),          _buildActivityItem('ƒêƒÉng nh·∫≠p v·ªõi quy·ªÅn Admin', '5 ph√∫t tr∆∞·ªõc', Icons.login, Colors.blue),          _buildActivityItem('C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ API', '10 ph√∫t tr∆∞·ªõc', Icons.sync, Colors.orange),          _buildActivityItem('Ki·ªÉm tra k·∫øt n·ªëi database', '15 ph√∫t tr∆∞·ªõc', Icons.storage, Colors.purple),        ],      ),    );  }  Widget _buildActivityItem(String title, String time, IconData icon, Color color) {    return Padding(      padding: const EdgeInsets.symmetric(vertical: 8),      child: Row(        children: [          Container(            width: 40,            height: 40,            decoration: BoxDecoration(              color: color.withOpacity(0.2),              borderRadius: BorderRadius.circular(10),            ),            child: Icon(icon, color: color, size: 20),          ),          const SizedBox(width: 15),          Expanded(            child: Column(              crossAxisAlignment: CrossAxisAlignment.start,              children: [                Text(                  title,                  style: const TextStyle(                    color: Colors.white,                    fontSize: 14,                    fontWeight: FontWeight.w500,                  ),                ),                Text(                  time,                  style: TextStyle(                    color: Colors.white.withOpacity(0.6),                    fontSize: 12,                  ),                ),              ],            ),          ),          Icon(            Icons.admin_panel_settings,            color: Colors.orange.withOpacity(0.7),            size: 16,          ),        ],      ),    );  }  void _showPromotionManagement() {    if (_isDisposed || !mounted) return;        showModalBottomSheet(      context: context,      backgroundColor: Colors.transparent,      isScrollControlled: true,      builder: (context) => Container(        height: MediaQuery.of(context).size.height * 0.7,        decoration: BoxDecoration(          color: Colors.grey[900],          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),        ),        padding: const EdgeInsets.all(20),        child: Column(          children: [            const Text(              'üéØ Qu·∫£n l√Ω khuy·∫øn m√£i',              style: TextStyle(                color: Colors.white,                fontSize: 20,                fontWeight: FontWeight.bold,              ),            ),            const SizedBox(height: 20),            Expanded(              child: ListView(                children: [                  _buildPromotionItem('SUMMER2024', 'Gi·∫£m 20% m√πa h√®', true),                  _buildPromotionItem('NEWUSER', 'Gi·∫£m 15% user m·ªõi', true),                  _buildPromotionItem('FREESHIP', 'Mi·ªÖn ph√≠ ship', false),                ],              ),            ),            Row(              children: [                Expanded(                  child: ElevatedButton.icon(                    onPressed: () => _showAddPromotionDialog(),                    icon: const Icon(Icons.add),                    label: const Text('Th√™m m·ªõi'),                    style: ElevatedButton.styleFrom(backgroundColor: Colors.green),                  ),                ),                const SizedBox(width: 10),                Expanded(                  child: ElevatedButton(                    onPressed: () => Navigator.pop(context),                    style: ElevatedButton.styleFrom(backgroundColor: Colors.red),                    child: const Text('ƒê√≥ng'),                  ),                ),              ],            ),          ],        ),      ),    );  }  Widget _buildPromotionItem(String code, String description, bool isActive) {    return Card(      color: Colors.grey[800],      child: ListTile(        leading: Container(          width: 50,          height: 50,          decoration: BoxDecoration(            color: isActive ? Colors.green.withOpacity(0.2) : Colors.red.withOpacity(0.2),            borderRadius: BorderRadius.circular(10),          ),          child: Icon(            Icons.local_offer,            color: isActive ? Colors.green : Colors.red,          ),        ),        title: Text(code, style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),        subtitle: Text(description, style: const TextStyle(color: Colors.white70)),        trailing: Row(          mainAxisSize: MainAxisSize.min,          children: [            IconButton(              icon: const Icon(Icons.edit, color: Colors.blue),              onPressed: () => _showEditPromotionDialog(code, description),            ),            IconButton(              icon: const Icon(Icons.delete, color: Colors.red),              onPressed: () => _deletePromotion(code),            ),          ],        ),      ),    );  }  void _showSystemSettings(BuildContext context) {    if (_isDisposed || !mounted) return;        showModalBottomSheet(      context: context,      backgroundColor: Colors.transparent,      builder: (context) => Container(        decoration: BoxDecoration(          color: Colors.grey[900],          borderRadius: const BorderRadius.vertical(top: Radius.circular(20)),        ),        padding: const EdgeInsets.all(20),        child: Column(          mainAxisSize: MainAxisSize.min,          children: [            const Text(              '‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng',              style: TextStyle(                color: Colors.white,                fontSize: 18,                fontWeight: FontWeight.bold,              ),            ),            const SizedBox(height: 20),            _buildSettingItem('Reload Data', Icons.refresh, () {              Navigator.pop(context);              if (!_isDisposed && mounted) {                _loadStats();                ScaffoldMessenger.of(context).showSnackBar(                  const SnackBar(content: Text('üîÑ ƒêang t·∫£i l·∫°i d·ªØ li·ªáu...'), backgroundColor: Colors.green),                );              }            }),            _buildSettingItem('System Backup', Icons.backup, () {              if (!_isDisposed && mounted) {                ScaffoldMessenger.of(context).showSnackBar(                  const SnackBar(content: Text('üíæ ƒêang backup h·ªá th·ªëng...'), backgroundColor: Colors.blue),                );              }            }),            _buildSettingItem('Clear Cache', Icons.clear_all, () {              if (!_isDisposed && mounted) {                ScaffoldMessenger.of(context).showSnackBar(                  const SnackBar(content: Text('üóëÔ∏è ƒê√£ x√≥a cache'), backgroundColor: Colors.orange),                );              }            }),            _buildSettingItem('Database Status', Icons.storage, () {              if (!_isDisposed && mounted) {                ScaffoldMessenger.of(context).showSnackBar(                  const SnackBar(content: Text('‚úÖ Database k·∫øt n·ªëi OK'), backgroundColor: Colors.green),                );              }            }),            const SizedBox(height: 20),            ElevatedButton(              onPressed: () => Navigator.pop(context),              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),              child: const Text('ƒê√≥ng'),            ),          ],        ),      ),    );  }  Widget _buildSettingItem(String title, IconData icon, VoidCallback onTap) {    return ListTile(      leading: Icon(icon, color: Colors.orange),      title: Text(title, style: const TextStyle(color: Colors.white)),      trailing: const Icon(Icons.arrow_forward_ios, color: Colors.white54, size: 16),      onTap: onTap,    );  }  Future<bool?> _showLogoutDialog() {    if (_isDisposed || !mounted) return Future.value(false);        return showDialog<bool>(      context: context,      builder: (context) => AlertDialog(        backgroundColor: Colors.grey[900],        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),        title: const Row(          children: [            Icon(Icons.logout, color: Colors.red),            SizedBox(width: 10),            Text('X√°c nh·∫≠n ƒëƒÉng xu·∫•t', style: TextStyle(color: Colors.white)),          ],        ),        content: const Text(          'B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t kh·ªèi t√†i kho·∫£n Admin?',          style: TextStyle(color: Colors.white70),        ),        actions: [          TextButton(            onPressed: () => Navigator.pop(context, false),            child: const Text('H·ªßy'),          ),          ElevatedButton(            onPressed: () => Navigator.pop(context, true),            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),            child: const Text('ƒêƒÉng xu·∫•t'),          ),        ],      ),    );  }  void _showAddPromotionDialog() {    if (_isDisposed || !mounted) return;        final codeController = TextEditingController();    final descController = TextEditingController();    showDialog(      context: context,      builder: (context) => AlertDialog(        backgroundColor: Colors.grey[900],        title: const Text('Th√™m khuy·∫øn m√£i m·ªõi', style: TextStyle(color: Colors.white)),        content: Column(          mainAxisSize: MainAxisSize.min,          children: [            TextField(              controller: codeController,              style: const TextStyle(color: Colors.white),              decoration: const InputDecoration(                labelText: 'M√£ khuy·∫øn m√£i',                labelStyle: TextStyle(color: Colors.white70),              ),            ),            const SizedBox(height: 16),            TextField(              controller: descController,              style: const TextStyle(color: Colors.white),              decoration: const InputDecoration(                labelText: 'M√¥ t·∫£',                labelStyle: TextStyle(color: Colors.white70),              ),            ),          ],        ),        actions: [          TextButton(            onPressed: () => Navigator.pop(context),            child: const Text('H·ªßy'),          ),          ElevatedButton(            onPressed: () {              if (codeController.text.isNotEmpty && descController.text.isNotEmpty) {                Navigator.pop(context);                if (!_isDisposed && mounted) {                  ScaffoldMessenger.of(context).showSnackBar(                    SnackBar(                      content: Text('‚úÖ ƒê√£ th√™m khuy·∫øn m√£i: ${codeController.text}'),                      backgroundColor: Colors.green,                    ),                  );                }              }            },            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),            child: const Text('Th√™m'),          ),        ],      ),    );  }  void _showEditPromotionDialog(String code, String description) {    if (_isDisposed || !mounted) return;        final codeController = TextEditingController(text: code);    final descController = TextEditingController(text: description);    showDialog(      context: context,      builder: (context) => AlertDialog(        backgroundColor: Colors.grey[900],        title: const Text('S·ª≠a khuy·∫øn m√£i', style: TextStyle(color: Colors.white)),        content: Column(          mainAxisSize: MainAxisSize.min,          children: [            TextField(              controller: codeController,              style: const TextStyle(color: Colors.white),              decoration: const InputDecoration(                labelText: 'M√£ khuy·∫øn m√£i',                labelStyle: TextStyle(color: Colors.white70),              ),            ),            const SizedBox(height: 16),            TextField(              controller: descController,              style: const TextStyle(color: Colors.white),              decoration: const InputDecoration(                labelText: 'M√¥ t·∫£',                labelStyle: TextStyle(color: Colors.white70),              ),            ),          ],        ),        actions: [          TextButton(            onPressed: () => Navigator.pop(context),            child: const Text('H·ªßy'),          ),          ElevatedButton(            onPressed: () {              Navigator.pop(context);              if (!_isDisposed && mounted) {                ScaffoldMessenger.of(context).showSnackBar(                  SnackBar(                    content: Text('‚úÖ ƒê√£ c·∫≠p nh·∫≠t khuy·∫øn m√£i: ${codeController.text}'),                    backgroundColor: Colors.blue,                  ),                );              }            },            style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),            child: const Text('C·∫≠p nh·∫≠t'),          ),        ],      ),    );  }  void _deletePromotion(String code) {    if (_isDisposed || !mounted) return;        showDialog(      context: context,      builder: (context) => AlertDialog(        backgroundColor: Colors.grey[900],        title: const Text('X√°c nh·∫≠n x√≥a', style: TextStyle(color: Colors.white)),        content: Text(          'B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a khuy·∫øn m√£i "$code"?',          style: const TextStyle(color: Colors.white70),        ),        actions: [          TextButton(            onPressed: () => Navigator.pop(context),            child: const Text('H·ªßy'),          ),          ElevatedButton(            onPressed: () {              Navigator.pop(context);              if (!_isDisposed && mounted) {                ScaffoldMessenger.of(context).showSnackBar(                  SnackBar(                    content: Text('üóëÔ∏è ƒê√£ x√≥a khuy·∫øn m√£i: $code'),                    backgroundColor: Colors.red,                  ),                );              }            },            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),            child: const Text('X√≥a'),          ),        ],      ),    );  }}class _ActionItem {  final String title;  final IconData icon;
  final Color color;
  final String description;
  final VoidCallback onTap;

  _ActionItem(this.title, this.icon, this.color, this.description, this.onTap);
}